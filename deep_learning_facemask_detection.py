# -*- coding: utf-8 -*-
"""Deep_learning_facemask_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oZYEjZ_Ogi7XmS5Fb1SwNJxJ9gf784wN
"""

from google.colab import drive
drive.mount('/content/mydrive')

import os

image_names = os.listdir('/content/mydrive/MyDrive/DeeplearningImages')

labels = []
for image in image_names:
  name = image.split('.')[0]
  if name == 'with_mask':
    labels.append('1')
  else:
    labels.append('0')

import pandas as pd
import numpy as np

df = pd.DataFrame({'file_name':image_names,'labels':labels})
df.shape

df.head()

df.info()

df['labels'].value_counts()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import tensorflow
from tensorflow.keras.preprocessing.image import load_img

i = 0
image = load_img('/content/mydrive/MyDrive/DeeplearningImages/'+ str(df['file_name'][i]))
plt.figure(figsize = (4,2))
if df['labels'][i]==0:
  title = 'Without_mask'
else:
  title = 'With_mask'
plt.title(title)
plt.imshow(image)
plt.show()

from sklearn.model_selection import train_test_split

train_df,test_df = train_test_split(df,random_state = 123,test_size= 0.2,stratify = df['labels'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_data = ImageDataGenerator(rescale = 1./255,
                                rotation_range =20,
                                horizontal_flip= True,
                                vertical_flip = True)
test_data =ImageDataGenerator(rescale =1./255)

train_data_generator = train_data.flow_from_dataframe(dataframe = train_df,
                                                      directory='/content/mydrive/MyDrive/DeeplearningImages',
                                                      target_size =(224,224),
                                                      x_col = 'file_name',
                                                      y_col = 'labels',
                                                      color_mode = 'rgb',
                                                      class_mode = 'binary',
                                                      batch_size = 32,
                                                      seed = 42,
                                                      shuffle = True,
                                                      validate_filenames = True
                                                      )

test_data_generator = test_data.flow_from_dataframe(dataframe = test_df,
                                                      directory='/content/mydrive/MyDrive/DeeplearningImages',
                                                      target_size =(224,224),
                                                      x_col = 'file_name',
                                                      y_col = 'labels',
                                                      color_mode = 'rgb',
                                                      class_mode = 'binary',
                                                      batch_size = 32,
                                                      seed = 42,
                                                      shuffle = True,
                                                      validate_filenames = True)

from tensorflow.keras import applications

base_model = tensorflow.keras.applications.MobileNetV2(weights = 'imagenet',
                                                       include_top = False,
                                                       input_shape = (224,224,3))
base_model.trainable = False
base_model.summary()

flatten_layer = tensorflow.keras.layers.Flatten()
output_layer  = tensorflow.keras.layers.Dense(1, activation = 'sigmoid')

final_model = tensorflow.keras.Sequential([base_model,flatten_layer,output_layer])

final_model.summary()

mc = tensorflow.keras.callbacks.ModelCheckpoint(filepath = '/content/best_model.h5',
                                                               monitor = 'val_loss',
                                                               mode = 'min',
                                                               save_best_only = True)
es= tensorflow.keras.callbacks.EarlyStopping(monitor='val_accuracy',
                                                 mode='max',
                                                 patience=5,
                                                 restore_best_weights= True,
                                                 )

final_model.compile(optimizer = 'adam',
                    loss = 'binary_crossentropy', 
                    metrics ='accuracy')

history = final_model.fit(train_data_generator,
                          steps_per_epoch =train_data_generator.samples//32,
                          validation_data = test_data_generator,
                          validation_steps = test_data_generator.samples//32,
                          epochs = 30,
                          callbacks = [mc,es])

history.history

print('Training Accuracy Score: ',np.mean(history.history['accuracy']).round(2))
print('Validation Accuracy Score: ',np.mean(history.history['val_accuracy']).round(2))
print('Training Loss: ',np.mean(history.history['loss']).round(2))
print('Validation Loss: ',np.mean(history.history['val_loss']).round(2))

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend('Training Accuracy Score')
plt.legend('Validation Accuracy Score')
plt.title('Accuracy State')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend('Training Loss Score')
plt.legend('Validation Loss Score')
plt.title('Loss State')
plt.show()

from tensorflow.keras.models import load_model
from tensorflow.keras.utils import load_img,img_to_array
best_model = load_model("/content/best_model.h5")

def image_treat(image):
  image = img_to_array(image)
  image = image/255
  image_change = np.expand_dims(image,axis=0)
  return(image_change)

image_names = os.listdir('/content/mydrive/MyDrive/DeeplearningImages')
len(image_names)

image_names = os.listdir('/content/mydrive/MyDrive/DeeplearningImages')
for i in range(990,1010):
  image = load_img('/content/mydrive/MyDrive/DeeplearningImages/'+str(image_names[i]),target_size=(224,224)) 
  image_change = image_treat(image)
  pred = best_model.predict(image_change).round()
  predict_result=''
  if pred[0] == 1:
    predict_result = 'Image is with Mask'
  else:
    predict_result = 'Image is not with Mask'
  plt.figure(figsize = (2,2))
  plt.imshow(image)
  plt.title(predict_result)
  plt.show()







